<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>链表结构，栈，队列，递归行为，哈希表，和有序表</title>
    <link href="/2020/02/26/%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84%EF%BC%8C%E6%A0%88%EF%BC%8C%E9%98%9F%E5%88%97%EF%BC%8C%E9%80%92%E5%BD%92%E8%A1%8C%E4%B8%BA%EF%BC%8C%E5%93%88%E5%B8%8C%E8%A1%A8%EF%BC%8C%E5%92%8C%E6%9C%89%E5%BA%8F%E8%A1%A8-1/%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84%EF%BC%8C%E6%A0%88%EF%BC%8C%E9%98%9F%E5%88%97%EF%BC%8C%E9%80%92%E5%BD%92%E8%A1%8C%E4%B8%BA%EF%BC%8C%E5%93%88%E5%B8%8C%E8%A1%A8%EF%BC%8C%E5%92%8C%E6%9C%89%E5%BA%8F%E8%A1%A8/"/>
    <url>/2020/02/26/%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84%EF%BC%8C%E6%A0%88%EF%BC%8C%E9%98%9F%E5%88%97%EF%BC%8C%E9%80%92%E5%BD%92%E8%A1%8C%E4%B8%BA%EF%BC%8C%E5%93%88%E5%B8%8C%E8%A1%A8%EF%BC%8C%E5%92%8C%E6%9C%89%E5%BA%8F%E8%A1%A8-1/%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84%EF%BC%8C%E6%A0%88%EF%BC%8C%E9%98%9F%E5%88%97%EF%BC%8C%E9%80%92%E5%BD%92%E8%A1%8C%E4%B8%BA%EF%BC%8C%E5%93%88%E5%B8%8C%E8%A1%A8%EF%BC%8C%E5%92%8C%E6%9C%89%E5%BA%8F%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h3><p>单向链表节点结构(可以实现成泛型)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> value;<br><span class="hljs-keyword">public</span> Node next;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> data)</span></span>&#123;<br>value = data;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="单项链表的反转"><a href="#单项链表的反转" class="headerlink" title="单项链表的反转"></a>单项链表的反转</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//单列表反转</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Node <span class="hljs-title">reverseLinkedList</span><span class="hljs-params">(Node head)</span> </span>&#123;<br>    Node pre = <span class="hljs-keyword">null</span>;<br>    Node next = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">while</span> (head != <span class="hljs-keyword">null</span>) &#123;<br>        next = head.next;<br>        head.next = pre;<br>        pre = head;<br>        head = next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> pre;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="链表实现队列"><a href="#链表实现队列" class="headerlink" title="链表实现队列"></a>链表实现队列</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//队列</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyQueue</span>&lt;<span class="hljs-title">V</span>&gt; </span>&#123;<br>   <span class="hljs-keyword">private</span> Node&lt;V&gt; head;<br>   <span class="hljs-keyword">private</span> Node&lt;V&gt; tail;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> size;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyQueue</span><span class="hljs-params">()</span> </span>&#123;<br>      head = <span class="hljs-keyword">null</span>;<br>      tail = <span class="hljs-keyword">null</span>;<br>      size = <span class="hljs-number">0</span>;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> size == <span class="hljs-number">0</span>;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> size;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">offer</span><span class="hljs-params">(V value)</span> </span>&#123;<br>      Node&lt;V&gt; cur = <span class="hljs-keyword">new</span> Node&lt;V&gt;(value);<br>      <span class="hljs-keyword">if</span> (tail == <span class="hljs-keyword">null</span>) &#123;<br>         head = cur;<br>         tail = cur;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>         tail.next = cur;<br>         tail = cur;<br>      &#125;<br>      size++;<br>   &#125;<br>   <span class="hljs-comment">//弹出</span><br>   <span class="hljs-comment">// C/C++的同学需要做节点析构的工作</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">poll</span><span class="hljs-params">()</span> </span>&#123;<br>      V ans = <span class="hljs-keyword">null</span>;<br>      <span class="hljs-keyword">if</span> (head != <span class="hljs-keyword">null</span>) &#123;<br>         ans = head.value;<br>         head = head.next;<br>         size--;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) &#123;<br>         tail = <span class="hljs-keyword">null</span>;<br>      &#125;<br>      <span class="hljs-keyword">return</span> ans;<br>   &#125;<br>   <span class="hljs-comment">//查出</span><br>   <span class="hljs-comment">// C/C++的同学需要做节点析构的工作</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">peek</span><span class="hljs-params">()</span> </span>&#123;<br>      V ans = <span class="hljs-keyword">null</span>;<br>      <span class="hljs-keyword">if</span> (head != <span class="hljs-keyword">null</span>) &#123;<br>         ans = head.value;<br>      &#125;<br>      <span class="hljs-keyword">return</span> ans;<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="列表实现栈"><a href="#列表实现栈" class="headerlink" title="列表实现栈"></a>列表实现栈</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//链表实现栈结构</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStack</span>&lt;<span class="hljs-title">V</span>&gt; </span>&#123;<br>   <span class="hljs-keyword">private</span> Node&lt;V&gt; head;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> size;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyStack</span><span class="hljs-params">()</span> </span>&#123;<br>      head = <span class="hljs-keyword">null</span>;<br>      size = <span class="hljs-number">0</span>;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> size == <span class="hljs-number">0</span>;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> size;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(V value)</span> </span>&#123;<br>      Node&lt;V&gt; cur = <span class="hljs-keyword">new</span> Node&lt;&gt;(value);<br>      <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) &#123;<br>         head = cur;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>         cur.next = head;<br>         head = cur;<br>      &#125;<br>      size++;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>      V ans = <span class="hljs-keyword">null</span>;<br>      <span class="hljs-keyword">if</span> (head != <span class="hljs-keyword">null</span>) &#123;<br>         ans = head.value;<br>         head = head.next;<br>         size--;<br>      &#125;<br>      <span class="hljs-keyword">return</span> ans;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">peek</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> head != <span class="hljs-keyword">null</span> ? head.value : <span class="hljs-keyword">null</span>;<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h3><p>双向链表节点结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DoubleNode</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> value;<br><span class="hljs-keyword">public</span> DoubleNode last;<br><span class="hljs-keyword">public</span> DoubleNode next;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DoubleNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> data)</span></span>&#123;<br>value = data;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="双向链表的反转"><a href="#双向链表的反转" class="headerlink" title="双向链表的反转"></a>双向链表的反转</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//双向链表的反转</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DoubleNode <span class="hljs-title">reverseDoubleList</span><span class="hljs-params">(DoubleNode head)</span> </span>&#123;<br>    DoubleNode pre = <span class="hljs-keyword">null</span>;<br>    DoubleNode next = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">while</span> (head != <span class="hljs-keyword">null</span>) &#123;<br>        next = head.next;<br>        head.next = pre;<br>        head.last = next;<br>        pre = head;<br>        head = next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> pre;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="双向列表实现双端队列"><a href="#双向列表实现双端队列" class="headerlink" title="双向列表实现双端队列"></a>双向列表实现双端队列</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//双向列表实现双端队列</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyDeque</span>&lt;<span class="hljs-title">V</span>&gt; </span>&#123;<br>   <span class="hljs-keyword">private</span> Node&lt;V&gt; head;<br>   <span class="hljs-keyword">private</span> Node&lt;V&gt; tail;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> size;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyDeque</span><span class="hljs-params">()</span> </span>&#123;<br>      head = <span class="hljs-keyword">null</span>;<br>      tail = <span class="hljs-keyword">null</span>;<br>      size = <span class="hljs-number">0</span>;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> size == <span class="hljs-number">0</span>;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> size;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pushHead</span><span class="hljs-params">(V value)</span> </span>&#123;<br>      Node&lt;V&gt; cur = <span class="hljs-keyword">new</span> Node&lt;&gt;(value);<br>      <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) &#123;<br>         head = cur;<br>         tail = cur;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>         cur.next = head;<br>         head.last = cur;<br>         head = cur;<br>      &#125;<br>      size++;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pushTail</span><span class="hljs-params">(V value)</span> </span>&#123;<br>      Node&lt;V&gt; cur = <span class="hljs-keyword">new</span> Node&lt;&gt;(value);<br>      <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) &#123;<br>         head = cur;<br>         tail = cur;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>         tail.next = cur;<br>         cur.last = tail;<br>         tail = cur;<br>      &#125;<br>      size++;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">pollHead</span><span class="hljs-params">()</span> </span>&#123;<br>      V ans = <span class="hljs-keyword">null</span>;<br>      <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) &#123;<br>         <span class="hljs-keyword">return</span> ans;<br>      &#125;<br>      size--;<br>      ans = head.value;<br>      <span class="hljs-keyword">if</span> (head == tail) &#123;<br>         head = <span class="hljs-keyword">null</span>;<br>         tail = <span class="hljs-keyword">null</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>         head = head.next;<br>         head.last = <span class="hljs-keyword">null</span>;<br>      &#125;<br>      <span class="hljs-keyword">return</span> ans;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">pollTail</span><span class="hljs-params">()</span> </span>&#123;<br>      V ans = <span class="hljs-keyword">null</span>;<br>      <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) &#123;<br>         <span class="hljs-keyword">return</span> ans;<br>      &#125;<br>      size--;<br>      ans = tail.value;<br>      <span class="hljs-keyword">if</span> (head == tail) &#123;<br>         head = <span class="hljs-keyword">null</span>;<br>         tail = <span class="hljs-keyword">null</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>         tail = tail.last;<br>         tail.next = <span class="hljs-keyword">null</span>;<br>      &#125;<br>      <span class="hljs-keyword">return</span> ans;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">peekHead</span><span class="hljs-params">()</span> </span>&#123;<br>      V ans = <span class="hljs-keyword">null</span>;<br>      <span class="hljs-keyword">if</span> (head != <span class="hljs-keyword">null</span>) &#123;<br>         ans = head.value;<br>      &#125;<br>      <span class="hljs-keyword">return</span> ans;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">peekTail</span><span class="hljs-params">()</span> </span>&#123;<br>      V ans = <span class="hljs-keyword">null</span>;<br>      <span class="hljs-keyword">if</span> (tail != <span class="hljs-keyword">null</span>) &#123;<br>         ans = tail.value;<br>      &#125;<br>      <span class="hljs-keyword">return</span> ans;<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="栈与队列的相互转换"><a href="#栈与队列的相互转换" class="headerlink" title="栈与队列的相互转换"></a>栈与队列的相互转换</h3><h4 id="栈转队列"><a href="#栈转队列" class="headerlink" title="栈转队列"></a>栈转队列</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> class05;<br><br><span class="hljs-keyword">import</span> java.util.Stack;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Code06_TwoStacksImplementQueue</span> </span>&#123;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * 两栈拼队列</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TwoStacksQueue</span> </span>&#123;<br>      <span class="hljs-keyword">public</span> Stack&lt;Integer&gt; stackPush;<br>      <span class="hljs-keyword">public</span> Stack&lt;Integer&gt; stackPop;<br><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TwoStacksQueue</span><span class="hljs-params">()</span> </span>&#123;<br>         stackPush = <span class="hljs-keyword">new</span> Stack&lt;Integer&gt;();<br>         stackPop = <span class="hljs-keyword">new</span> Stack&lt;Integer&gt;();<br>      &#125;<br><br>      <span class="hljs-comment">// push栈向pop栈倒入数据</span><br>      <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pushToPop</span><span class="hljs-params">()</span> </span>&#123;<br>         <span class="hljs-keyword">if</span> (stackPop.empty()) &#123;<br>            <span class="hljs-keyword">while</span> (!stackPush.empty()) &#123;<br>               stackPop.push(stackPush.pop());<br>            &#125;<br>         &#125;<br>      &#125;<br><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pushInt)</span> </span>&#123;<br>         stackPush.push(pushInt);<br>         pushToPop();<br>      &#125;<br><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">poll</span><span class="hljs-params">()</span> </span>&#123;<br>         <span class="hljs-keyword">if</span> (stackPop.empty() &amp;&amp; stackPush.empty()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;Queue is empty!&quot;</span>);<br>         &#125;<br>         pushToPop();<br>         <span class="hljs-keyword">return</span> stackPop.pop();<br>      &#125;<br><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">peek</span><span class="hljs-params">()</span> </span>&#123;<br>         <span class="hljs-keyword">if</span> (stackPop.empty() &amp;&amp; stackPush.empty()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;Queue is empty!&quot;</span>);<br>         &#125;<br>         pushToPop();<br>         <span class="hljs-keyword">return</span> stackPop.peek();<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>      TwoStacksQueue test = <span class="hljs-keyword">new</span> TwoStacksQueue();<br>      test.add(<span class="hljs-number">1</span>);<br>      test.add(<span class="hljs-number">2</span>);<br>      test.add(<span class="hljs-number">3</span>);<br>      System.out.println(test.peek());<br>      System.out.println(test.poll());<br>      System.out.println(test.peek());<br>      System.out.println(test.poll());<br>      System.out.println(test.peek());<br>      System.out.println(test.poll());<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>申请两个栈，导入数据时，导入到一个栈中，然后 在 放到 另外一个栈 ，取数据从另外一个栈中取。注意:1)这两个栈之间会进行倒数据，倒数据时要一次性倒完。2)只有第二个栈空了才能增加新数据，因为，如果不全取出的话数据就会乱。</p><h4 id="队列转栈"><a href="#队列转栈" class="headerlink" title="队列转栈"></a>队列转栈</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TwoQueueStack</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>   <span class="hljs-keyword">public</span> Queue&lt;T&gt; queue;<br>   <span class="hljs-keyword">public</span> Queue&lt;T&gt; help;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TwoQueueStack</span><span class="hljs-params">()</span> </span>&#123;<br>      queue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>      help = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(T value)</span> </span>&#123;<br>      queue.offer(value);<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">poll</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-comment">//秒啊,取数据时，会把queue中的数据持续取出，一直到只剩下一个</span><br>      <span class="hljs-keyword">while</span> (queue.size() &gt; <span class="hljs-number">1</span>) &#123;<br>         help.offer(queue.poll());<br>      &#125;<br>      T ans = queue.poll();<br>      Queue&lt;T&gt; tmp = queue;<br>      queue = help;<br>      help = tmp;<br>      <span class="hljs-keyword">return</span> ans;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">peek</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">while</span> (queue.size() &gt; <span class="hljs-number">1</span>) &#123;<br>         help.offer(queue.poll());<br>      &#125;<br>      T ans = queue.poll();<br>      help.offer(ans);<br>      Queue&lt;T&gt; tmp = queue;<br>      queue = help;<br>      help = tmp;<br>      <span class="hljs-keyword">return</span> ans;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> queue.isEmpty();<br>   &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>   System.out.println(<span class="hljs-string">&quot;test begin&quot;</span>);<br>   TwoQueueStack&lt;Integer&gt; myStack = <span class="hljs-keyword">new</span> TwoQueueStack&lt;&gt;();<br>   Stack&lt;Integer&gt; test = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>   <span class="hljs-keyword">int</span> testTime = <span class="hljs-number">1000000</span>;<br>   <span class="hljs-keyword">int</span> max = <span class="hljs-number">1000000</span>;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; testTime; i++) &#123;<br>      <span class="hljs-keyword">if</span> (myStack.isEmpty()) &#123;<br>         <span class="hljs-keyword">if</span> (!test.isEmpty()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Oops&quot;</span>);<br>         &#125;<br>         <span class="hljs-keyword">int</span> num = (<span class="hljs-keyword">int</span>) (Math.random() * max);<br>         myStack.push(num);<br>         test.push(num);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>         <span class="hljs-keyword">if</span> (Math.random() &lt; <span class="hljs-number">0.25</span>) &#123;<br>            <span class="hljs-keyword">int</span> num = (<span class="hljs-keyword">int</span>) (Math.random() * max);<br>            myStack.push(num);<br>            test.push(num);<br>         &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Math.random() &lt; <span class="hljs-number">0.5</span>) &#123;<br>            <span class="hljs-keyword">if</span> (!myStack.peek().equals(test.peek())) &#123;<br>               System.out.println(<span class="hljs-string">&quot;Oops&quot;</span>);<br>            &#125;<br>         &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Math.random() &lt; <span class="hljs-number">0.75</span>) &#123;<br>            <span class="hljs-keyword">if</span> (!myStack.poll().equals(test.pop())) &#123;<br>               System.out.println(<span class="hljs-string">&quot;Oops&quot;</span>);<br>            &#125;<br>         &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (myStack.isEmpty() != test.isEmpty()) &#123;<br>               System.out.println(<span class="hljs-string">&quot;Oops&quot;</span>);<br>            &#125;<br>         &#125;<br>      &#125;<br>   &#125;<br><br>   System.out.println(<span class="hljs-string">&quot;test finish!&quot;</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/.com//%E9%98%9F%E5%88%97%E8%BD%AC%E6%A0%88.png" alt="image-20210303132647382"></p><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>注意：任何递归函数都可以改成非递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 求arr中的最大值</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getMax</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>   <span class="hljs-keyword">return</span> process(arr, <span class="hljs-number">0</span>, arr.length - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// arr[L..R]范围上求最大值  L ... R   N</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">process</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R)</span> </span>&#123;<br>   <span class="hljs-comment">// arr[L..R]范围上只有一个数，直接返回，base case</span><br>   <span class="hljs-keyword">if</span> (L == R) &#123; <br>      <span class="hljs-keyword">return</span> arr[L];<br>   &#125;<br>   <span class="hljs-comment">// L...R 不只一个数</span><br>   <span class="hljs-comment">// mid = (L + R) / 2</span><br>   <span class="hljs-keyword">int</span> mid = L + ((R - L) &gt;&gt; <span class="hljs-number">1</span>); <span class="hljs-comment">// 中点    1</span><br>   <span class="hljs-keyword">int</span> leftMax = process(arr, L, mid);<br>   <span class="hljs-keyword">int</span> rightMax = process(arr, mid + <span class="hljs-number">1</span>, R);<br>   <span class="hljs-keyword">return</span> Math.max(leftMax, rightMax);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/.com//%E9%80%92%E5%BD%92%E6%93%8D%E4%BD%9C.png"></p><p><img src="/.com//%E9%80%92%E5%BD%92%E7%9A%84%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90.png">hahhahahahhahh </p><p><strong>分析递归的事件复杂度</strong></p><p>形如</p><p>T(N) = a * T(N/b) + O(N^d)(其中的a，b，d都是常数)</p><p>的递归函数，可以直接通过Master公式来确定时间复杂度</p><p>如果log(b,a)&lt;d,复杂度为O(N^d)</p><p>如果log(b,a)&gt;d,复杂度为O(N^log(b,a))</p><p>如果log(b,a)==d,复杂度为O(N^d * logN)</p><h3 id="Hash表和有序表"><a href="#Hash表和有序表" class="headerlink" title="Hash表和有序表"></a>Hash表和有序表</h3><p>hash表的操作基本都是O(1),非基础类型，在hash表中保存的实际是内存地址</p><p>在hash表中原生的类型，是按值传递进hash表中的，比如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>    HashMap&lt;Integer,String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>Integer a = <span class="hljs-number">190</span>;<br>    Integer b = <span class="hljs-number">190</span>;<br>    <br>    <span class="hljs-comment">//false 双等于比较内存地址</span><br>  System.out.ptintln(a == b)  <br>    <br>     map.put(a,<span class="hljs-string">&quot;我是a&quot;</span>);<br>    <span class="hljs-comment">//这个就是true</span><br>    System.out.println(map.containsKey(b))<br>    <br>&#125; <br></code></pre></td></tr></table></figure><p>有序表</p><p>自定义数据类型要自定义比较器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// TreeMap 有序表：接口名</span><br><span class="hljs-comment">// 红黑树、avl、sb树、跳表</span><br><span class="hljs-comment">// O(logN)</span><br>System.out.println(<span class="hljs-string">&quot;有序表测试开始&quot;</span>);<br>TreeMap&lt;Integer, String&gt; treeMap = <span class="hljs-keyword">new</span> TreeMap&lt;&gt;();<br><br>treeMap.put(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;我是3&quot;</span>);<br>treeMap.put(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;我是4&quot;</span>);<br>treeMap.put(<span class="hljs-number">8</span>, <span class="hljs-string">&quot;我是8&quot;</span>);<br>treeMap.put(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;我是5&quot;</span>);<br>treeMap.put(<span class="hljs-number">7</span>, <span class="hljs-string">&quot;我是7&quot;</span>);<br>treeMap.put(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;我是1&quot;</span>);<br>treeMap.put(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;我是2&quot;</span>);<br><br>System.out.println(treeMap.containsKey(<span class="hljs-number">1</span>));<br>System.out.println(treeMap.containsKey(<span class="hljs-number">10</span>));<br><br>System.out.println(treeMap.get(<span class="hljs-number">4</span>));<br>System.out.println(treeMap.get(<span class="hljs-number">10</span>));<br><br>treeMap.put(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;他是4&quot;</span>);<br>System.out.println(treeMap.get(<span class="hljs-number">4</span>));<br><br><span class="hljs-comment">// treeMap.remove(4);</span><br>System.out.println(treeMap.get(<span class="hljs-number">4</span>));<br><br>System.out.println(<span class="hljs-string">&quot;新鲜：&quot;</span>);<br><br>System.out.println(treeMap.firstKey());<br>System.out.println(treeMap.lastKey());<br><span class="hljs-comment">// &lt;= 4</span><br>System.out.println(treeMap.floorKey(<span class="hljs-number">4</span>));<br><span class="hljs-comment">// &gt;= 4</span><br>System.out.println(treeMap.ceilingKey(<span class="hljs-number">4</span>));<br><span class="hljs-comment">// O(logN)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>异或运算和几个经典题目解析</title>
    <link href="/2020/02/26/%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97%E5%92%8C%E5%87%A0%E4%B8%AA%E7%BB%8F%E5%85%B8%E9%A2%98%E7%9B%AE%E8%A7%A3%E6%9E%90/"/>
    <url>/2020/02/26/%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97%E5%92%8C%E5%87%A0%E4%B8%AA%E7%BB%8F%E5%85%B8%E9%A2%98%E7%9B%AE%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="java常见的几种运算符"><a href="#java常见的几种运算符" class="headerlink" title="java常见的几种运算符"></a>java常见的几种运算符</h2><table><thead><tr><th align="left">操作符</th><th align="left">描述</th><th align="left">例子</th></tr></thead><tbody><tr><td align="left">＆</td><td align="left">如果相对应位都是1，则结果为1，否则为0</td><td align="left">（A＆B），得到12，即0000 1100</td></tr><tr><td align="left">|</td><td align="left">如果相对应位都是 0，则结果为 0，否则为 1</td><td align="left">（A | B）得到61，即 0011 1101</td></tr><tr><td align="left">^</td><td align="left">如果相对应位值相同，则结果为0，否则为1</td><td align="left">（A ^ B）得到49，即 0011 0001</td></tr><tr><td align="left">〜</td><td align="left">按位取反运算符翻转操作数的每一位，即0变成1，1变成0。</td><td align="left">（〜A）得到-61，即1100 0011</td></tr><tr><td align="left">&lt;&lt;</td><td align="left">按位左移运算符。左操作数按位左移右操作数指定的位数。</td><td align="left">A &lt;&lt; 2得到240，即 1111 0000</td></tr><tr><td align="left">&gt;&gt;</td><td align="left">按位右移运算符。左操作数按位右移右操作数指定的位数。</td><td align="left">A &gt;&gt; 2得到15即 1111</td></tr><tr><td align="left">&gt;&gt;&gt;</td><td align="left">按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</td><td align="left">A&gt;&gt;&gt;2得到15即0000 1111</td></tr></tbody></table><p><strong>异或运算</strong>（如果相对应位值相同，则结果为0，否则为1也可以理解成无进位相加）按位来说。</p><h3 id="异或的三个性质："><a href="#异或的三个性质：" class="headerlink" title="异或的三个性质："></a>异或的三个性质：</h3><p>(1)零和任何数异或都得这个数本身，</p><p>(2)两个相同的数异或都得零。</p><p>(3)异或还满足<strong>交换结合律</strong> a^b = b^a ;(a^b)^c = a ^(b^c)</p><h4 id="异或的几个例题："><a href="#异或的几个例题：" class="headerlink" title="异或的几个例题："></a>异或的几个例题：</h4><h5 id="1-如何不用额外变量交换两个数"><a href="#1-如何不用额外变量交换两个数" class="headerlink" title="1.如何不用额外变量交换两个数"></a>1.如何不用额外变量交换两个数</h5><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">a</span> = a^b<br><br><span class="hljs-attr">b</span> = a^b<br><br><span class="hljs-attr">a</span> = a^b<br></code></pre></td></tr></table></figure><p>证明：</p><p>假设 a = 甲 b = 乙  </p><p>a = 甲 ^ 乙  b = 甲 ^ 乙 ^ 乙 我们由性质得出 乙 ^ 乙 得 0 0又异或甲得甲,所以此时b等于甲。</p><p>同样得道理，第三行代码，b此时等于甲 而a等于 甲^乙</p><p>所以第三行代码就等于 a = 甲 ^ 乙 ^ 甲  甲异或甲等于0 所以最后得乙。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> a = <span class="hljs-number">6</span>;<br><span class="hljs-keyword">int</span> b = <span class="hljs-number">10</span>;<br><br>System.out.println(<span class="hljs-string">&quot;a:&quot;</span> + a);<br>System.out.println(<span class="hljs-string">&quot;b:&quot;</span> + b);<br><br>a = a^b;<br>b = a^b;<br>a = a^b;<br><br>System.out.println(<span class="hljs-string">&quot;a:&quot;</span> + a);<br>System.out.println(<span class="hljs-string">&quot;b:&quot;</span> + b);<br><br><br>        <span class="hljs-keyword">int</span> arr[] = &#123;<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">10</span>&#125;;<br><br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;<br><br>        System.out.println(arr[i] +<span class="hljs-string">&quot;&quot;</span>+ arr[j]);<br>        arr[i] = arr[i]^arr[j];<br>        arr[j] = arr[i]^arr[j];<br>        arr[i] = arr[i]^arr[j];<br>        System.out.println(arr[i] +<span class="hljs-string">&quot;&quot;</span>+ arr[j]);<br></code></pre></td></tr></table></figure><p><strong>注</strong>:异或交换数，只能在两个变量，内存空间是分开得情况下使用。</p><h5 id="2-一个数组中有一种数出现了奇数次，其他数都出现了偶数次，怎么找到并打印这种数"><a href="#2-一个数组中有一种数出现了奇数次，其他数都出现了偶数次，怎么找到并打印这种数" class="headerlink" title="2.一个数组中有一种数出现了奇数次，其他数都出现了偶数次，怎么找到并打印这种数"></a>2.一个数组中有一种数出现了奇数次，其他数都出现了偶数次，怎么找到并打印这种数</h5><p>一个数组，里面保存{4,4,3,3,4,1,1,1,2,1,2}</p><p>只要是相同得数异或就会得0，无论顺序怎么变，比如</p><p>b^a^c = a^b^c  ，那上述得这个数组就是1111,22,33,444 先是四个1做异或，得零，两个二得零，两个三得零，但是三个四最后会得4</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//一个数组中有一种数出现了奇数次，其他数都出现了偶数次，怎么找到并打印这种数</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pringOddTimesNum1</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br><br>    <span class="hljs-keyword">int</span> eor = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ; i &lt; arr.length ; i++)&#123;<br>        eor ^= arr[i];<br>    &#125;<br>    System.out.println(eor);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-怎么把一个int类型得数，提取出最右侧得1来"><a href="#3-怎么把一个int类型得数，提取出最右侧得1来" class="headerlink" title="3.怎么把一个int类型得数，提取出最右侧得1来"></a>3.怎么把一个int类型得数，提取出最右侧得1来</h5><p>找出一个整形32位二进制最右边的一，就是这个数&amp;这个数的相反数。</p><p>理解:假设一个数为0110000111这个数取反得1001111000 如果在加上一得 1001111001(一个数得相反数就是这个数取反加一)0110000111 与 1001111001这两个数求与 得0000000001，这样就提取出了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Oneonthefarright</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>&#123;<br><br>    System.out.println(a &amp; (~a+<span class="hljs-number">1</span>));<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-一个数组中有两种数出现了奇数次，其他数都出现了偶数次，怎么找到并打印这两个数。"><a href="#4-一个数组中有两种数出现了奇数次，其他数都出现了偶数次，怎么找到并打印这两个数。" class="headerlink" title="4.一个数组中有两种数出现了奇数次，其他数都出现了偶数次，怎么找到并打印这两个数。"></a>4.一个数组中有两种数出现了奇数次，其他数都出现了偶数次，怎么找到并打印这两个数。</h5><p>思路:还是申请一个变量eor，然后把数组异或得结果保存下来，那么这是eor的结果就是eor = a^b这两种数的异或，为什么?因为数组种的其他数都出现偶数次。我们得到结果之后呢？eor必不为0，我们就找到他为1的位置，这里我们找的是最右的(那么这个位置的数ab必不相等)，可能a这个位置是一，也有可能b这个位置是一，但不用纠结，我们假设a这个位置是一，那么在这个数组中出现偶次数的数当中也必然有这个位置数为一的，我们做异或就能求出这个a(因为除了这个a其他数都出现了偶数次)</p><p>我们把这个a保存为eor`,这个eor`与eor异或得到b</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//一个数组中有两种数出现了奇数次，</span><br><span class="hljs-comment">// 其他数都出现了偶数次，怎么找到并打印这两个数。</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printOddTimesNum2</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> eor = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ; i &lt; arr.length ; i++)&#123;<br><br>        eor ^= arr[i];<br>    &#125;<br><br>    <span class="hljs-comment">//最右侧的一提取出来</span><br>    <span class="hljs-keyword">int</span> rightOne = eor ^ (-eor);<br><br>    <span class="hljs-comment">//eor`</span><br>    <span class="hljs-keyword">int</span> onlyOne = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ; i &lt; arr.length ; i++)&#123;<br><br>        <span class="hljs-keyword">if</span> ((arr[i] &amp; rightOne) != <span class="hljs-number">0</span> )&#123;<br>            onlyOne ^= arr[i];<br>        &#125;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;a:&quot;</span> + onlyOne + <span class="hljs-string">&quot;b:&quot;</span> + (onlyOne^eor));<br><br>&#125; <br></code></pre></td></tr></table></figure><h5 id="5-一个数组中有一种数出现了K次，其它数出现了M次，M-gt-1-K-lt-M，找到，出现了K次的数，要求，额外空间复杂度O-1-时间复杂度O-N-。"><a href="#5-一个数组中有一种数出现了K次，其它数出现了M次，M-gt-1-K-lt-M，找到，出现了K次的数，要求，额外空间复杂度O-1-时间复杂度O-N-。" class="headerlink" title="5.一个数组中有一种数出现了K次，其它数出现了M次，M &gt; 1,K &lt; M，找到，出现了K次的数，要求，额外空间复杂度O(1),时间复杂度O(N)。"></a>5.一个数组中有一种数出现了K次，其它数出现了M次，M &gt; 1,K &lt; M，找到，出现了K次的数，要求，额外空间复杂度O(1),时间复杂度O(N)。</h5><p>理解: 我们申请一个长度32的数组，用来记录，数组中每个数，每位出现次数，比如000001出现了七次，000011出现了三次,那么再数组的第31位累加得10，然后我们用，数组中得值去除以7，除不尽，说明出现三次的那个数种这个位置有1(因为K&lt;M所以不可能出现整数倍)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//请保证arr中，只有一种数出现了k次，其他数都出现了N次</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Code08_KM</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr,<span class="hljs-keyword">int</span> k,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>    <span class="hljs-keyword">int</span>[] t = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">32</span>];<br><br>    <span class="hljs-comment">//t[0] 0位置的1出现了几个</span><br>    <span class="hljs-comment">//t[i] i位置的1出现了几个</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> num : arr)&#123;<br><br>        <span class="hljs-comment">//判断这个数的i是不是为1</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">32</span> ; i++)&#123;<br>            <span class="hljs-keyword">if</span> (((num&gt;&gt;i) &amp; <span class="hljs-number">1</span>) != <span class="hljs-number">0</span>)&#123;<br>                t[i]++;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span> ; i++)&#123;<br><br>            <span class="hljs-keyword">if</span> ((t[i] % m) !=<span class="hljs-number">0</span>)&#123;<br>                ans |= (<span class="hljs-number">1</span> &lt;&lt; i);<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="对数器"><a href="#对数器" class="headerlink" title="对数器"></a>对数器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 对数器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">int</span> kinds = <span class="hljs-number">4</span>;<br><span class="hljs-keyword">int</span> range = <span class="hljs-number">200</span>;<br><span class="hljs-keyword">int</span> testTime = <span class="hljs-number">100000</span>;<br><span class="hljs-keyword">int</span> max = <span class="hljs-number">9</span>;<br>System.out.println(<span class="hljs-string">&quot;测试开始&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; testTime;i++)&#123;<br>    <span class="hljs-keyword">int</span> a = (<span class="hljs-keyword">int</span>)(Math.random() * max) + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> b = (<span class="hljs-keyword">int</span>)(Math.random() * max) + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> k = Math.min(a,b);<br>    <span class="hljs-keyword">int</span> m = Math.max(a,b);<br><br>    <span class="hljs-keyword">if</span> (k == m)&#123;<br>        k++;<br>    &#125;<br>    <span class="hljs-keyword">int</span>[] arr = randomArray(kinds,range,k,m);<br>    <span class="hljs-keyword">int</span> ans1 = test(arr,k,m);<br>    <span class="hljs-keyword">int</span> ans2 = Code08_KM(arr,k,m);<br>    <span class="hljs-keyword">if</span> (ans1 != ans2)&#123;<br>        System.out.println(<span class="hljs-string">&quot;出现错误&quot;</span>);<br>    &#125;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;测试结束&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr,<span class="hljs-keyword">int</span> k,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>    HashMap&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> num : arr)&#123;<br>        <span class="hljs-keyword">if</span> (map.containsKey(num))&#123;<br>            map.put(num,map.get(num)+<span class="hljs-number">1</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            map.put(num,<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> num : map.keySet())&#123;<br>        <span class="hljs-keyword">if</span> (map.get(num) == k)&#123;<br>            <span class="hljs-keyword">return</span> num;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] randomArray(<span class="hljs-keyword">int</span> maxKinds , <span class="hljs-keyword">int</span> range, <span class="hljs-keyword">int</span> k , <span class="hljs-keyword">int</span> m)&#123;<br><br>    <span class="hljs-keyword">int</span> ktimeNum = randomNumber(range);<br><br>    <span class="hljs-keyword">int</span> numKinds = (<span class="hljs-keyword">int</span>)(Math.random() * maxKinds) + <span class="hljs-number">2</span>;<br><br>    <span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[k +(numKinds -<span class="hljs-number">1</span>) * m];<br>    <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (;index &lt; k;index++)&#123;<br>        arr[index] = ktimeNum;<br>    &#125;<br>    numKinds--;<br><br>    HashSet&lt;Integer&gt; set = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>    set.add(ktimeNum);<br>    <span class="hljs-keyword">while</span> (numKinds != <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">int</span> curNum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            curNum = randomNumber(range);<br>        &#125;<span class="hljs-keyword">while</span> (set.contains(curNum));<br>        set.add(curNum);<br>        numKinds--;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ; i &lt; m ; i++)&#123;<br>            arr[index++] = curNum;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">// arr 填好了</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ; i &lt; arr.length;i++)&#123;<br>        <span class="hljs-comment">// i 位置的数，我想随机和j位置的数做交换</span><br>        <span class="hljs-keyword">int</span> j = (<span class="hljs-keyword">int</span>)(Math.random() * arr.length);<br>        <span class="hljs-keyword">int</span> tmp = arr[i];<br>        arr[i] = arr[j];<br>        arr[j] = tmp;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//[-range, +range]</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">randomNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span> range)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>)(Math.random() * range + <span class="hljs-number">1</span>) - ((<span class="hljs-keyword">int</span>)(Math.random() * range)+<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript宿主对象DOM与BOM</title>
    <link href="/2019/11/26/JavaScript%E5%AE%BF%E4%B8%BB%E5%AF%B9%E8%B1%A1DOM%E4%B8%8EBOM/"/>
    <url>/2019/11/26/JavaScript%E5%AE%BF%E4%B8%BB%E5%AF%B9%E8%B1%A1DOM%E4%B8%8EBOM/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是DOM？"><a href="#什么是DOM？" class="headerlink" title="什么是DOM？"></a>什么是DOM？</h3><ul><li><p>DOM，全称Document Object Model文档对象模型。</p></li><li><p>JS中通过DOM来对HTML文档进行操作。只要理解了DOM就可以随心所欲的操作WEB页面。</p></li><li><p>文档</p><p>​    -文档表示的就是整个HTML网页文档</p></li><li><p>对象</p><p>​    -对象表示将网页的每一个部分都转换成了一个对象</p></li><li><p>模型</p><p>​    -使用模型来表示对象之间的关系，这样方便我们获取对象</p></li></ul><p><strong>节点</strong></p><p>节点：Node—构成HTML文档最基本的单元。</p><p>常用节点分为四类</p><p>​    -文档节点：整个HTML文档</p><p>​    -元素节点：HTML文档中的HTML标签</p><p>​    -属性节点：元素的属性</p><p>​    -文本节点：HTML标签中的文本内容</p><p>注:所谓的节点也就是对象</p><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>事件，就是文档或浏览器窗口中发生的一些特定的交互瞬间。</p><p>JavaScript与HTML之间的交互是通过时间实现的。</p><p>对于Web应用来说，有下面这些代表性的事件：点击某个元素，将鼠标移动至某个元素上方，按下键盘上某个键，等等。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&#x27;utf-8&#x27;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&#x27;X-UA-Compatible&#x27;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&#x27;IE=edge&#x27;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Page Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            我们可以在事件对于的属性中设置一些js代码</span><br><span class="hljs-comment">                    这样当事件被触发时，这些代码将会执行</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">            这种方法不推荐使用</span><br><span class="hljs-comment">                --&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- &lt;button id=&quot;brn&quot; onclick=&quot;alert(&#x27;讨厌你点我干嘛!&#x27;);&quot;&gt;我是一个按钮&lt;/button&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>我是一个按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br><br>        /**<br>            事件：就是用户与浏览器之间的一些交互行为<br>        */<br><br><br><span class="javascript">        <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn&quot;</span>);</span><br><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(btn);</span><br>        <br>        /*<br>            可以为按钮的对应事件绑定处理函数的形式来响应事件<br>        */<br><span class="javascript">        <span class="hljs-comment">//绑定一个单击事件</span></span><br><span class="javascript">        <span class="hljs-comment">// btn.onclick = function()&#123;</span></span><br><span class="javascript">        <span class="hljs-comment">//     alert(&quot;你还点----&quot;)</span></span><br><span class="javascript">        <span class="hljs-comment">// &#125;;</span></span><br><span class="javascript">        <span class="hljs-comment">//绑定双击事件</span></span><br><span class="javascript">        btn.ondblclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            alert(<span class="hljs-string">&quot;你还点----&quot;</span>)</span><br>        &#125;;<br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注</strong>:浏览器加载页面是自上往下加载的</p><h4 id="获取元素系节点"><a href="#获取元素系节点" class="headerlink" title="获取元素系节点"></a>获取元素系节点</h4><p>通过document对象调用</p><p>1.getElementById()</p><p>​    -通过id属性获取一个元素节点对象</p><p>2.getElementsByTagName()</p><p>​    -通过标签名获取一组元素节点对象</p><p>3.getElementsByName()</p><p>​    -通过name属性获取一组元素节点对象</p><h4 id="DOM常用的方法总结"><a href="#DOM常用的方法总结" class="headerlink" title="DOM常用的方法总结"></a>DOM常用的方法总结</h4><pre><code>            getElementById()    返回带有指定ID 的元素。            getElementsByTagName()  返回包含带有指定标签名称的所有元素的节            点列表(集合/节点数组)。            getElementsByClassName()    返回包含带有指定类名的所有元素的节            点列表。(但是该方法不支持IE8及一下的浏览器)            getElementsByName(&#39;a&#39;) 通过name属性获取一组元素节点对象            document.querySelector(&#39;#a&#39;) 通过CSS选择器来获取一个元素节点对象            document.querySelectorAll(&#39;span&#39;) 通过CSS选择器来获取一组元素节点对象            appendChild()   把新的子节点添加到指定节点。            removeChild()   删除子节点。            replaceChild()  替换子节点。            insertBefore()  在指定的子节点前面插入新的子节点。            createAttribute()   创建属性节点。            createElement() 创建元素节点。            createTextNode()    创建文本节点。            getAttribute()  返回指定的属性值。            setAttribute()  把指定属性设置或修改为指定的值。            当前节点.paretNode   表示当前节点的父节点            当前节点.previousSibling 表示当前节点的前一个兄弟节点 (也可能获取空白文本)            当前节点.nextSibling 表示当前节点的后一个兄弟节点            父节点.firstchild 可以获取第一个子节点(包括空白文本节点)            父节点.firstElementchild 可以获取第一个子元素(不包括空白文本节点)            父节点.childNodes 表示当前节点的所有子节点.注意：在IE8及以下的浏览器中，不会将空白文本当成子节点</code></pre><h4 id="通过DOM修改css样式"><a href="#通过DOM修改css样式" class="headerlink" title="通过DOM修改css样式"></a>通过DOM修改css样式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript">        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 点击按钮以后，修改box1的大小</span><br><span class="hljs-comment">         * </span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">//获取box1</span><br>        <span class="hljs-keyword">var</span> box1 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;box1&quot;</span>);<br>        <span class="hljs-comment">//为按钮绑定单机响应函数</span><br>        <span class="hljs-keyword">var</span> btn01 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn01&quot;</span>);<br><br>        btn01.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;               <br><span class="hljs-comment">//修改box1的宽高</span><br>            <span class="hljs-comment">/**  </span><br><span class="hljs-comment">             * 通过JS修改元素的样式</span><br><span class="hljs-comment">             * 语法：元素.style.样式名 = 样式值</span><br><span class="hljs-comment">             * </span><br><span class="hljs-comment">             * 注意：如果css的样式名中含有-</span><br><span class="hljs-comment">             *      这种名称再JS中是不合法的比如 background-color</span><br><span class="hljs-comment">             *      需要将这种样式名修改为驼峰命名法</span><br><span class="hljs-comment">             *  </span><br><span class="hljs-comment">             * 我们通过style属性设置的样式都是内联样式</span><br><span class="hljs-comment">             *  而内联样式有较高的优先级，所以通过JS修改的样式往往会立即显示</span><br><span class="hljs-comment">             * </span><br><span class="hljs-comment">             *  但是如果在样式写了！important,则此时样式会有最高的优先级</span><br><span class="hljs-comment">             *      即使通过JS也不能覆盖改样式，此时将会导致JS修改样式失效</span><br><span class="hljs-comment">             *      所以尽量不要为样式添加！important</span><br><span class="hljs-comment">             */</span><br>            box1.style.width = <span class="hljs-string">&quot;300px&quot;</span>;<br>            box1.style.height = <span class="hljs-string">&quot;300px&quot;</span>;<br>            box1.style.backgroundColor = <span class="hljs-string">&quot;yellow&quot;</span><br></code></pre></td></tr></table></figure><p>读取样式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> btn02 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn02&quot;</span>);<br>          btn02.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>              <span class="hljs-comment">/**</span><br><span class="hljs-comment">               * 读取box1的样式</span><br><span class="hljs-comment">               * </span><br><span class="hljs-comment">               * 通过style属性设置和读取的都是内联样式</span><br><span class="hljs-comment">               *  无法读取样式表种的样式</span><br><span class="hljs-comment">               */</span><br>              <span class="hljs-comment">// alert(box1.style.height);</span><br>              alert(box1.style.height);<br>          &#125;<br><br></code></pre></td></tr></table></figure><p>获取元素的当前样式(currentStyle只有IE浏览器支持)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//点击按钮以后读取box1的样式</span><br><span class="hljs-keyword">var</span> box1 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;box1&quot;</span>);<br><span class="hljs-keyword">var</span> btn01 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn01&quot;</span>);<br>btn01.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 获取元素的当前显示的样式</span><br><span class="hljs-comment"> * 语法：元素.currentStyle.样式名</span><br><span class="hljs-comment"> * 它可以用来读取当前元素正在显示的样式</span><br><span class="hljs-comment"> * 如果当前元素没有设置该样式，则获取它的默认值</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * currentStyle只有IE浏览器支持，其他的浏览器都不支持</span><br><span class="hljs-comment"> */</span><br>                    alert(box1.currentStyle.backgroundColor);<br><br>&#125;;<br></code></pre></td></tr></table></figure><p>获取元素css当前的样式(不支持IE8及一下)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 在其他浏览器中可以使用</span><br><span class="hljs-comment"> *          getComputedStyle()这个方法来获取元素当前的样式</span><br><span class="hljs-comment"> *          这个方法是window的方法，可以直接使用</span><br><span class="hljs-comment"> * 需要两个参数</span><br><span class="hljs-comment"> *          第一个:要获取样式的元素</span><br><span class="hljs-comment"> *          第二个：可以传递一个伪元素，一般都穿null</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 该方法会返回一个对象，对象种封装了当前元素对应的样式</span><br><span class="hljs-comment"> *  可以通过对象，样式名来读取样式</span><br><span class="hljs-comment"> *  如果获取的样式没有设置，则会获取到真实的值，而不是默认值</span><br><span class="hljs-comment"> *  比如：没有设置width，他不会获取到auto，而是一个长度</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 但是该方法不支持IE8及一下的浏览器</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><br> <span class="hljs-keyword">var</span> obj = getComputedStyle(box1,<span class="hljs-literal">null</span>);<br> alert(obj.width);<br><span class="hljs-comment">//  alert(obj.backgroundColor);</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
